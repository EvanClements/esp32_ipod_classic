name: Build Arduino Bin

# Here we tell GitHub to run the workflow when a commit
# is pushed or a Pull Request is opened.
on: [push, pull_request]

# This is the list of jobs that will be run concurrently.
# Since we use a build matrix, the actual number of jobs
# started depends on how many configurations the matrix
# will produce.
jobs:
  # This is the name of the job - can be whatever.
  test-matrix:

    # Here we tell GitHub that the jobs must be determined
    # dynamically depending on a matrix configuration.
    # strategy:
      # matrix:
        # The matrix will produce one job for each configuration
        # parameter of type `arduino-platform`, in this case a
        # total of 2.
        # arduino-platform: ["espressif:esp32"]
        # This is usually optional but we need to statically define the
        # FQBN of the boards we want to test for each platform. In the
        # future the CLI might automatically detect and download the core
        # needed to compile against a certain FQBN, at that point the
        # following `include` section will be useless.
        # include:
          # This works like this: when the platform is "espressif:esp32", the
          # variable `fqbn` is set to "espressif:esp32:esp32".
          # - arduino-platform: "espressif:esp32"
            # fqbn: "espressif:esp32:esp32"

    # This is the platform GitHub will use to run our workflow, we
    # pick Windows for no particular reason.
    runs-on: windows-latest

    # This is the list of steps this job will run.
    steps:
      # First of all, we clone the repo using the `checkout` action.
      - name: Checkout
        uses: actions/checkout@v3
      
      # Cache the Arduino CLI data with ESP32 board/platform(s) installed
      # - name: Cache Arduino CLI
      
      
      # We use the `arduino/setup-arduino-cli` action to install and
      # configure the Arduino CLI on the system.
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      # We then install the platform, which one will be determined
      # dynamically by the build matrix.
      - name: Install platform
        run: |
          which arduino-cli
          arduino-cli version
          arduino-cli core update-index --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          arduino-cli core install esp32:esp32 --additional-urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
      
      
      # Next, we install the required libraries
      # TODO: find a way to extract this out using sketch.yaml (or similar)
      - name: Install Libraries
        run: |
          arduino-cli lib update-index
          arduino-cli lib install --git_url https://github.com/pschatzmann/arduino-audio-tools
          arduino-cli lib install AsyncTCP
          arduino-cli lib install --git_url: https://github.com/me-no-dev/ESPAsyncWebServer
          arduino-cli lib install ElegantOTA
      
      # Finally, we compile the sketch, using the FQBN that was set
      # in the build matrix.
      - name: Compile Sketch
        run: arduino-cli compile --fqbn esp32:esp32 ./src
        
      # - name: Upload Firmware BIN
      #   run: 
